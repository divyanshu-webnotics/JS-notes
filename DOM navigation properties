`nextElementSibling` is part of a small family of **node navigation properties** that let you move around the DOM without doing a full search.

Hereâ€™s the main set youâ€™ll use:

---

### **Element navigation (skips text nodes, comments, etc.)**

* **`element.nextElementSibling`** â†’ The **next** sibling element.
* **`element.previousElementSibling`** â†’ The **previous** sibling element.
* **`element.firstElementChild`** â†’ The first child element.
* **`element.lastElementChild`** â†’ The last child element.
* **`element.children`** â†’ An HTMLCollection (array-like) of all direct child elements.

---

### **Node navigation (includes text nodes, comments, etc.)**

* **`element.nextSibling`** â†’ The next sibling **node** (could be text, comment, or element).
* **`element.previousSibling`** â†’ The previous sibling node.
* **`element.firstChild`** â†’ The first child node (might be text).
* **`element.lastChild`** â†’ The last child node.
* **`element.childNodes`** â†’ A NodeList of all child nodes (including text nodes, whitespace, etc.).

---

### **Parent navigation**

* **`element.parentElement`** â†’ The parent element.
* **`element.parentNode`** â†’ The parent node (could be a Document or DocumentFragment too).
* **`element.closest(selector)`** â†’ Finds the nearest ancestor (including itself) matching a selector.

---

ðŸ’¡ **Key difference:**

* **`...Element...`** â†’ Only counts HTML elements.
* **Without "Element"** â†’ Can return text nodes, comments, whitespace.

---

If you like, I can make you a **visual diagram** showing how these properties connect elements in a DOM tree â€” that makes it click instantly.







1. Using CSS selectors in JS
You can select an element as if you were in CSS:

js
Copy
Edit
// Select the 2nd child of .container
const secondChild = document.querySelector('.container :nth-child(2)');
console.log(secondChild);
Here, :nth-child(n) works exactly like in CSS but is passed to querySelector or querySelectorAll.

2. Using DOM properties
If you already have the parent element, you can get its children as a collection and pick by index (remember: 0-based index in JS):

js
Copy
Edit
const container = document.querySelector('.container');
const secondChild = container.children[1]; // 2nd child
console.log(secondChild);
